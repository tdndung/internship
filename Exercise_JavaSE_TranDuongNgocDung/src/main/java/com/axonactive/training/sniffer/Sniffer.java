package com.axonactive.training.sniffer;

import com.axonactive.training.address.Address;

import java.awt.Window.Type;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "tbl_sniffer")
@NamedQueries({
	@NamedQuery(name="Sniffer.findByCode", query = "SELECT sn FROM Sniffer sn WHERE sn.code = :snifferCode"),
	@NamedQuery(name="Sniffer.findById", query = "SELECT sn FROM Sniffer sn WHERE sn.id = :snifferId"),
	@NamedQuery(name="Sniffer.deleteByCode", query = "SELECT sn FROM Sniffer sn WHERE sn.code = :snifferCode"),
	@NamedQuery(name="Sniffer.getAllSniffer", query = "SELECT sn FROM Sniffer sn")
})
@NoArgsConstructor
public @Data class Sniffer {
	/**
	 * an identifier string to recognize a sniffer. it will be automatically generated by the system.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;

	@Column(name = "code", length = 50, nullable = false)
	private String code;
	
	/**
	 * the name of a Sniffer. it's required field
	 */	
	@Column(name = "name", length = 50, nullable = true)
	private String name;
	
	/**
	 * the macAddress of a Sniffer. it's required field
	 */	
	@Column(name = "macAddress", length = 50, nullable = false)
	private String macAddress;
	
	/**
	 * the status of a Sniffer. it's required field. Default is INACTIVE
	 */		
//	@Column(name = "status", length = 50, nullable = false)
	@Enumerated(EnumType.ORDINAL)
	private Status status;
	
	/**
	 * the Address of a Sniffer. it's required field
	 */	

	@OneToOne (cascade = CascadeType.ALL)
//	@JoinColumn(name = "fk_address")
	private Address Address;
	
	/**
	 * @param code
	 * @param name
	 * @param macAddress
	 * @param status
	 * @param address
	 */
	public Sniffer(String code, String name, String macAddress, Status status, Address address) {
		this.code = code;
		this.name = name;
		this.macAddress = macAddress;
		this.status = status;
		this.Address = address;
	}
	
	public Sniffer( String macAddress,Address address) {
		
		this.macAddress = macAddress;
	
		this.Address = address;
	}
	
}
